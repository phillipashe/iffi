// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/image/image.proto

package image

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DecodeImage_Decode_FullMethodName = "/main.DecodeImage/Decode"
)

// DecodeImageClient is the client API for DecodeImage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DecodeImageClient interface {
	// Sends a decoded image when passed an encoded image
	Decode(ctx context.Context, in *Image, opts ...grpc.CallOption) (*DecodedImage, error)
}

type decodeImageClient struct {
	cc grpc.ClientConnInterface
}

func NewDecodeImageClient(cc grpc.ClientConnInterface) DecodeImageClient {
	return &decodeImageClient{cc}
}

func (c *decodeImageClient) Decode(ctx context.Context, in *Image, opts ...grpc.CallOption) (*DecodedImage, error) {
	out := new(DecodedImage)
	err := c.cc.Invoke(ctx, DecodeImage_Decode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DecodeImageServer is the server API for DecodeImage service.
// All implementations must embed UnimplementedDecodeImageServer
// for forward compatibility
type DecodeImageServer interface {
	// Sends a decoded image when passed an encoded image
	Decode(context.Context, *Image) (*DecodedImage, error)
	mustEmbedUnimplementedDecodeImageServer()
}

// UnimplementedDecodeImageServer must be embedded to have forward compatible implementations.
type UnimplementedDecodeImageServer struct {
}

func (UnimplementedDecodeImageServer) Decode(context.Context, *Image) (*DecodedImage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decode not implemented")
}
func (UnimplementedDecodeImageServer) mustEmbedUnimplementedDecodeImageServer() {}

// UnsafeDecodeImageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DecodeImageServer will
// result in compilation errors.
type UnsafeDecodeImageServer interface {
	mustEmbedUnimplementedDecodeImageServer()
}

func RegisterDecodeImageServer(s grpc.ServiceRegistrar, srv DecodeImageServer) {
	s.RegisterService(&DecodeImage_ServiceDesc, srv)
}

func _DecodeImage_Decode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Image)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DecodeImageServer).Decode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DecodeImage_Decode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DecodeImageServer).Decode(ctx, req.(*Image))
	}
	return interceptor(ctx, in, info, handler)
}

// DecodeImage_ServiceDesc is the grpc.ServiceDesc for DecodeImage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DecodeImage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.DecodeImage",
	HandlerType: (*DecodeImageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Decode",
			Handler:    _DecodeImage_Decode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/image/image.proto",
}
